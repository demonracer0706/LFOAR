int pinIRd1 = 8; //chân digital cảm biến 1
int pinIRd2 = 12; //chân digital cảm biến 2
#define inA1 7 //in1 động cơ A
#define inA2 6 //in2 động cơ A
int enA = 10; //en động cơ A
#define inB1 5 //in1 động cơ B
#define inB2 4 //in2 động cơ B
int enB = 11; //en động cơ B
#include <Servo.h>
Servo sr04; //khai báo biến của Servo
#define trig 2 //chân trig của HC-SR04
#define echo 3 //chân echo của HC-SR04



void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(pinIRd1,INPUT);
  pinMode(pinIRd2,INPUT);
  pinMode(inA1, OUTPUT);
  pinMode(inA2, OUTPUT);
  pinMode(inB1, OUTPUT);
  pinMode(inB2, OUTPUT);
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(trig, OUTPUT);//chân trig sẽ phát tín hiệu
  pinMode(echo, INPUT);//chân echo sẽ nhận tín hiệu
  sr04.attach(9);  //chân 9 điều khiển servo
}

void babyMove(byte inR1, byte inR2, byte enA, byte inL1, byte inL2, byte enB, byte action) {
  /*
  action= 0 đứng yên
  action =1 lùi lại
  action =2 đi thẳng
  action =3 quay trái
  action =4 quay phải
  action =5 rẽ trái
  action =6 rẽ phải
  action =7 rẽ lùi trái
  action =8 rẽ lùi phải

  */
  switch (action)
  {
    case 0:// không di chuyển
      motordir(inR1, inR2, enA, 0);
      motordir(inL1, inL2, enB, 0);
      break;
    case 1://lùi
      motordir(inR1, inR2, enA, 1);
      motordir(inL1, inL2, enB, 1);
      break;
    case 2:// tiến
      motordir(inR1, inR2, enA, 2);
      motordir(inL1, inL2, enB, 2);
      break;
    case 3:// quay trái
      motordir(inR1, inR2, enA, 1);
      motordir(inL1, inL2, enB, 2);
      break;
    case 4:// quay phải
      motordir(inR1, inR2, enA, 2);
      motordir(inL1, inL2, enB, 1);
      break;
    case 5:// rẽ trái
      motordir(inR1, inR2, enA, 2);
      motordir(inL1, inL2, enB, 0);
      break;
    case 6:// rẽ phải
      motordir(inR1, inR2, enA, 0);
      motordir(inL1, inL2, enB, 2);
      break;
    case 7:// rẽ lùi trái
      motordir(inR1, inR2, enA, 1);
      motordir(inL1, inL2, enB, 0);
      break;
    case 8:// rẽ lùi phải
      motordir(inR1, inR2, enA, 0);
      motordir(inL1, inL2, enB, 1);
      break;
    //default:
      //action = 0;
      
  }
}

void motordir(byte in1, byte in2, byte enA, byte direct) {
  /*
  direct=0 dừng
  direct=1 quay chiều 1
  direct=2 quay chiều ngược lại
  */
  switch (direct)
  {
    case 0://dừng
      digitalWrite(in1, LOW);
      digitalWrite(in2, LOW);
      break;
    case 1://quay chiều 1, ngược
      digitalWrite(in1, HIGH);
      digitalWrite(in2, LOW);
      analogWrite(enA, 180);
      break;
    case 2://quay chiều 2, xuôi
      digitalWrite(in1, LOW);
      digitalWrite(in2, HIGH);
      analogWrite(enA, 180);
      break;
      //default:

  }
}
boolean DValue(byte PinNumb) {
  //1 sáng
  //0 tối
  return(digitalRead(PinNumb));   
}

int ktlechline(int PinNumb1, int PinNumb2) //hàm trả về lệch trái hay phải
{
  int left = 0; //biến kiểm tra lệch trái
  int right = 0; //biến kiểm tra lệch phải
  left = DValue(PinNumb1); //kiểm tra cảm biến trái ở trong vạch đen
  right= DValue(PinNumb2); //kiểm tra cảm biến phải ở trong vạch đen
  if ((left!=0) || (right!=0))
    return (left - right);
  else return 2;  
  /*
  left - right = 0 là không lệch
  left - right = 1 là lệch phải
  left - right = -1 là lệch trái
  */
  
}

int DoKC (byte angle)
{
  sr04.write(angle);
  delay(2);
  unsigned long duration;//biến đo thời gian
  int distance;//biến lưu khoảng cách

  /* phát xung từ chân trig */
  digitalWrite(trig,0);//tắt chân trig
  delayMicroseconds(2);
  digitalWrite(trig,1);//phát xung từ chân trig
  delayMicroseconds(5);//xung có độ dài 5 microSeconds
  digitalWrite(trig,0);//tắt chân trig
  
  /* tính toán thời gian */
  duration = pulseIn(echo,HIGH);//đo độ rộng xung HIGH ở chân echo
  distance = int(duration/2/29.412);//tính khoảng cách đến vật
  return distance;
}


void babyROBO(byte inR1, byte inR2, byte enA, byte inL1, byte inL2, byte enB, byte sen1, byte sen2) {

  int test = ktlechline(sen1, sen2);
  babyMove( inR1, inR2, enA, inL1, inL2, enB, 2);
  test = ktlechline(sen1, sen2);
  if (test ==  2) // truong hop ban dau
  {
    babyMove( inR1, inR2, enA, inL1, inL2, enB, 2);
  }
  if (test ==  -1) // lech phai
  {
    while(test ==  -1)
    {
     babyMove( inR1, inR2, enA, inL1, inL2, enB, 8);
     test = ktlechline(sen1, sen2);
    }
  }
  if (test == 1) // lech trai
  {
    while(test == 1)
    {
    babyMove( inR1, inR2, enA, inL1, inL2, enB, 7);
    test = ktlechline(sen1, sen2);
    }
  }
  if (test == 0) //tim thay line
  {
    babyMove( inR1, inR2, enA, inL1, inL2, enB, 0);
    delay(100);
    babyMove( inR1, inR2, enA, inL1, inL2, enB, 2);
    delay(50);
    babyMove( inR1, inR2, enA, inL1, inL2, enB, 4);
    delay(250);
  }
}

void abc(byte inR1, byte inR2, byte enA, byte inL1, byte inL2, byte enB)
{
  byte sen1 = digitalRead(pinIRd1);
  byte sen2 = digitalRead(pinIRd2);
  int front_distance = DoKC (78);
  int allow_distance = 25;
  int turn_back_time = 650;
  int test = ktlechline(sen1, sen2);
  int left_distance;
  int right_distance;
  int max_distance;
  if (front_distance > allow_distance)
    {
      babyROBO(inA1, inA2, enA, inB1, inB2, enB, pinIRd1, pinIRd2);
      front_distance = DoKC (78);
    }
  else
  {
    if (front_distance < allow_distance)
    {
      babyMove(inR1,inR2,enA,inL1,inL2,enB,0);
      left_distance = DoKC (168); //đo khoảng cách bên trái
      delay(500);
      right_distance = DoKC (0); //đo khoảng cách bên phải
      delay(500);
      max_distance = max(left_distance,right_distance);// so sánh giá trị lớn nhất với khoảng cách bên phải (gán bằng cái lớn nhất)
        if  (max_distance==left_distance)
        {
          babyMove(inR1,inR2,enA,inL1,inL2,enB,4);// Nếu bên trái là khoảng cách lớn nhất thì quay trái
          delay (turn_back_time/2);
          front_distance=DoKC (78);
        }
        else
        {
          if  (max_distance==right_distance)
          {
            babyMove(inR1,inR2,enA,inL1,inL2,enB,3);// Nếu bên phải có khoảng cách lớn nhất thì quay phải
            delay (turn_back_time/2);
            front_distance=DoKC (78);
          }
        }
      } 
    }
}


void loop() {
  // put your main code here, to run repeatedly:
  abc(inA1, inA2, enA, inB1, inB2, enB);
}
